/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockERC20, MockERC20Interface } from "../MockERC20";

const _abi = [
  {
    type: "function",
    name: "DOMAIN_SEPARATOR",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "allowance",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "name_",
        type: "string",
        internalType: "string",
      },
      {
        name: "symbol_",
        type: "string",
        internalType: "string",
      },
      {
        name: "decimals_",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "nonces",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "permit",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "v",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transfer",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b50610e3e8061001c5f395ff3fe608060405234801561000f575f80fd5b50600436106100da575f3560e01c80633644e5151161008857806395d89b411161006357806395d89b41146101bd578063a9059cbb146101c5578063d505accf146101d8578063dd62ed3e146101eb575f80fd5b80633644e5151461016e57806370a08231146101765780637ecebe001461019e575f80fd5b806318160ddd116100b857806318160ddd1461013457806323b872dd14610146578063313ce56714610159575f80fd5b806306fdde03146100de578063095ea7b3146100fc5780631624f6c61461011f575b5f80fd5b6100e6610223565b6040516100f39190610981565b60405180910390f35b61010f61010a3660046109d1565b6102b2565b60405190151581526020016100f3565b61013261012d366004610aa8565b61031e565b005b6003545b6040519081526020016100f3565b61010f610154366004610b1c565b6103c6565b60025460405160ff90911681526020016100f3565b6101386104d5565b610138610184366004610b56565b6001600160a01b03165f9081526004602052604090205490565b6101386101ac366004610b56565b60086020525f908152604090205481565b6100e66104fa565b61010f6101d33660046109d1565b610509565b6101326101e6366004610b6f565b61059d565b6101386101f9366004610bd5565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205490565b60605f805461023190610c06565b80601f016020809104026020016040519081016040528092919081815260200182805461025d90610c06565b80156102a85780601f1061027f576101008083540402835291602001916102a8565b820191905f5260205f20905b81548152906001019060200180831161028b57829003601f168201915b5050505050905090565b335f8181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061030c9086815260200190565b60405180910390a35060015b92915050565b60095460ff16156103765760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c495a45440000000000000000000000000060448201526064015b60405180910390fd5b5f6103818482610c8a565b50600161038e8382610c8a565b506002805460ff191660ff83161790556103a6610804565b6006556103b161081c565b60075550506009805460ff1916600117905550565b6001600160a01b0383165f9081526005602090815260408083203384529091528120545f19811461041f576103fb81846108bd565b6001600160a01b0386165f9081526005602090815260408083203384529091529020555b6001600160a01b0385165f9081526004602052604090205461044190846108bd565b6001600160a01b038087165f90815260046020526040808220939093559086168152205461046f908461091f565b6001600160a01b038086165f8181526004602052604090819020939093559151908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104c29087815260200190565b60405180910390a3506001949350505050565b5f6006546104e1610804565b146104f3576104ee61081c565b905090565b5060075490565b60606001805461023190610c06565b335f9081526004602052604081205461052290836108bd565b335f90815260046020526040808220929092556001600160a01b0385168152205461054d908361091f565b6001600160a01b0384165f818152600460205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061030c9086815260200190565b428410156105ed5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161036d565b5f60016105f86104d5565b6001600160a01b038a165f90815260086020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d9290919061064583610d59565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e001604051602081830303815290604052805190602001206040516020016106be92919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201205f84529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610719573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b0381161580159061074f5750876001600160a01b0316816001600160a01b0316145b61079b5760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f5349474e4552000000000000000000000000000000000000604482015260640161036d565b6001600160a01b038181165f9081526005602090815260408083208b8516808552908352928190208a90555189815291928b16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35050505050505050565b5f61097d8061081563ffffffff8216565b9250505090565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f5f60405161084c9190610d71565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661087d610804565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b5f8183101561090e5760405162461bcd60e51b815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f7700000000604482015260640161036d565b6109188284610de2565b9392505050565b5f8061092b8385610df5565b9050838110156109185760405162461bcd60e51b815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f770000000000000000604482015260640161036d565b4690565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146109cc575f80fd5b919050565b5f80604083850312156109e2575f80fd5b6109eb836109b6565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610a1c575f80fd5b813567ffffffffffffffff811115610a3657610a366109f9565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610a6557610a656109f9565b604052818152838201602001851015610a7c575f80fd5b816020850160208301375f918101602001919091529392505050565b803560ff811681146109cc575f80fd5b5f805f60608486031215610aba575f80fd5b833567ffffffffffffffff811115610ad0575f80fd5b610adc86828701610a0d565b935050602084013567ffffffffffffffff811115610af8575f80fd5b610b0486828701610a0d565b925050610b1360408501610a98565b90509250925092565b5f805f60608486031215610b2e575f80fd5b610b37846109b6565b9250610b45602085016109b6565b929592945050506040919091013590565b5f60208284031215610b66575f80fd5b610918826109b6565b5f805f805f805f60e0888a031215610b85575f80fd5b610b8e886109b6565b9650610b9c602089016109b6565b95506040880135945060608801359350610bb860808901610a98565b9699959850939692959460a0840135945060c09093013592915050565b5f8060408385031215610be6575f80fd5b610bef836109b6565b9150610bfd602084016109b6565b90509250929050565b600181811c90821680610c1a57607f821691505b602082108103610c3857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610c8557805f5260205f20601f840160051c81016020851015610c635750805b601f840160051c820191505b81811015610c82575f8155600101610c6f565b50505b505050565b815167ffffffffffffffff811115610ca457610ca46109f9565b610cb881610cb28454610c06565b84610c3e565b6020601f821160018114610cea575f8315610cd35750848201515b5f19600385901b1c1916600184901b178455610c82565b5f84815260208120601f198516915b82811015610d195787850151825560209485019460019092019101610cf9565b5084821015610d3657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601160045260245ffd5b5f60018201610d6a57610d6a610d45565b5060010190565b5f808354610d7e81610c06565b600182168015610d955760018114610daa57610dd7565b60ff1983168652811515820286019350610dd7565b865f5260205f205f5b83811015610dcf57815488820152600190910190602001610db3565b505081860193505b509195945050505050565b8181038181111561031857610318610d45565b8082018082111561031857610318610d4556fea2646970667358221220e4050a8bc8e891c4b74efec5f93f7f75e67873efa32cc15bf0f9e34f6f60264f64736f6c634300081a0033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockERC20> {
    return super.deploy(overrides || {}) as Promise<MockERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  override connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}

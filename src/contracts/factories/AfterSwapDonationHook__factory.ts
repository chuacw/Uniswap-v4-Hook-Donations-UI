/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AfterSwapDonationHook,
  AfterSwapDonationHookInterface,
} from "../AfterSwapDonationHook";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPoolManager",
        name: "_poolManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "HookNotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPool",
    type: "error",
  },
  {
    inputs: [],
    name: "LockFailure",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPoolManager",
    type: "error",
  },
  {
    inputs: [],
    name: "NotSelf",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "payee",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "donatedAmount",
        type: "uint256",
      },
    ],
    name: "Donation",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
          {
            internalType: "int256",
            name: "liquidityDelta",
            type: "int256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
        ],
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        name: "",
        type: "tuple",
      },
      {
        internalType: "BalanceDelta",
        name: "",
        type: "int256",
      },
      {
        internalType: "BalanceDelta",
        name: "",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "afterAddLiquidity",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
      {
        internalType: "BalanceDelta",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "afterDonate",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "afterInitialize",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
          {
            internalType: "int256",
            name: "liquidityDelta",
            type: "int256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
        ],
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        name: "",
        type: "tuple",
      },
      {
        internalType: "BalanceDelta",
        name: "",
        type: "int256",
      },
      {
        internalType: "BalanceDelta",
        name: "",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "afterRemoveLiquidity",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
      {
        internalType: "BalanceDelta",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "key",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "zeroForOne",
            type: "bool",
          },
          {
            internalType: "int256",
            name: "amountSpecified",
            type: "int256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct IPoolManager.SwapParams",
        name: "swapParams",
        type: "tuple",
      },
      {
        internalType: "BalanceDelta",
        name: "delta",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "afterSwap",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
          {
            internalType: "int256",
            name: "liquidityDelta",
            type: "int256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
        ],
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        name: "",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeAddLiquidity",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeDonate",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeInitialize",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
          {
            internalType: "int256",
            name: "liquidityDelta",
            type: "int256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
        ],
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        name: "",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeRemoveLiquidity",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "Currency",
            name: "currency0",
            type: "address",
          },
          {
            internalType: "Currency",
            name: "currency1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "int24",
            name: "tickSpacing",
            type: "int24",
          },
          {
            internalType: "contract IHooks",
            name: "hooks",
            type: "address",
          },
        ],
        internalType: "struct PoolKey",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "zeroForOne",
            type: "bool",
          },
          {
            internalType: "int256",
            name: "amountSpecified",
            type: "int256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct IPoolManager.SwapParams",
        name: "",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeSwap",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
      {
        internalType: "BeforeSwapDelta",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disableDonation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "donationEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "donationEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "donationPayee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "donationPercent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "donationPercent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "donationRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "donationRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "percent",
        type: "uint256",
      },
    ],
    name: "enableDonation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getHookPermissions",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "beforeInitialize",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "afterInitialize",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "beforeAddLiquidity",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "afterAddLiquidity",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "beforeRemoveLiquidity",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "afterRemoveLiquidity",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "beforeSwap",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "afterSwap",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "beforeDonate",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "afterDonate",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "beforeSwapReturnDelta",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "afterSwapReturnDelta",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "afterAddLiquidityReturnDelta",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "afterRemoveLiquidityReturnDelta",
            type: "bool",
          },
        ],
        internalType: "struct Hooks.Permissions",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolManager",
    outputs: [
      {
        internalType: "contract IPoolManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "unlockCallback",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523461026357604051601f61101d38819003918201601f19168301916001600160401b038311848410176102675780849260209460405283398101031261026357516001600160a01b0381168103610263576080525f6101a061006461027b565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152826101608201528261018082015201525f6101a06100c261027b565b8281528260208201528260408201528260608201528260808201528260a08201528260c0820152600160e082015282610100820152826101208201528261014082015282610160820152826101808201520152612000301615801590610256575b8015610249575b801561023c575b801561022f575b8015610222575b8015610216575b8015610206575b80156101fa575b80156101ee575b80156101e2575b80156101d6575b80156101ca575b80156101be575b6101ab575f80546001600160a01b03191633179055604051610d81908161029c8239608051818181610160015261059b0152f35b630732d7b560e51b5f523060045260245ffd5b50600130161515610177565b50600230161515610170565b50600430161515610169565b50600830161515610162565b5060103016151561015b565b50602030161515610154565b506040301615156001141561014d565b50608030161515610146565b506101003016151561013f565b5061020030161515610138565b5061040030161515610131565b506108003016151561012a565b5061100030161515610123565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b604051906101c082016001600160401b038111838210176102675760405256fe60806040526004361015610011575f80fd5b5f3560e01c806321d0ee7014610757578063259982e5146107575780632d910864146107275780633440d820146106d85780634b79a12d146106be578063575e24b41461066b5780636c2bbe7e146104d257806379dd973d146106395780638da5cb5b1461061257806391dd73461461056957806399af9357146104d75780639f063efc146104d2578063a910f80f14610465578063af45de051461043d578063b47b2fb1146103c0578063b6a8b0fa14610146578063b71628b914610388578063bb521b3214610341578063c2aa399e146102f4578063c4e833ce1461018f578063dc4c90d31461014b578063e1b4af69146101465763f9c68ff314610116575f80fd5b34610142575f36600319011261014257335f90815260016020818152604090922001545b604051908152f35b5f80fd5b610884565b34610142575f366003190112610142576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610142575f366003190112610142575f6101a06040516101af816108d6565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152826101608201528261018082015201526101c06020604051610212816108d6565b5f8152818101905f8252604081015f8152606082015f8152608083015f815260a084015f815260c085015f815260e0860190600182526101008701925f84526101208801945f86526101408901965f88526101608a01985f8a526101a06101808c019b5f8d52019b5f8d526040519d8e915f835251151591015251151560408d015251151560608c015251151560808b015251151560a08a015251151560c089015251151560e08801525115156101008701525115156101208601525115156101408501525115156101608401525115156101808301525115156101a0820152f35b3461014257602036600319011261014257602061032f61031261075c565b6001600160a01b039081165f908152600160205260409020541690565b6040516001600160a01b039091168152f35b3461014257602036600319011261014257602061037e61035f61075c565b6001600160a01b039081165f9081526001602052604090205416151590565b6040519015158152f35b3461014257602036600319011261014257602061013a6103a661075c565b60018060a01b03165f526001602052600160405f20015490565b3461014257610160366003190112610142576103da61075c565b5060a03660231901126101425760603660c319011261014257610144356001600160401b03811161014257610413903690600401610772565b505060406104236101243561092e565b82516001600160e01b03199092168252600f0b6020820152f35b34610142575f36600319011261014257335f5260016020525f60016040822082815501555f80f35b34610142576101203660031901126101425761047f61075c565b5060a036602319011261014257610494610810565b5060e4358060020b0361014257610104356001600160401b038111610142576104c1903690600401610772565b5050630a85dc2960e01b5f5260045ffd5b610826565b34610142576040366003190112610142576104f061075c565b60405190604082018281106001600160401b038211176105555760405260018060a01b031681526001602082016024358152325f528160205260405f2092828060a01b039051166bffffffffffffffffffffffff60a01b845416178355519101555f80f35b634e487b7160e01b5f52604160045260245ffd5b34610142576020366003190112610142576004356001600160401b03811161014257610599903690600401610772565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610603576105d7604091602093610ccd565b815192839181835280519182918282860152018484015e5f828201840152601f01601f19168101030190f35b63570c108560e11b5f5260045ffd5b34610142575f366003190112610142575f546040516001600160a01b039091168152602090f35b34610142575f36600319011261014257335f908152600160209081526040909120546001600160a01b0316151561037e565b34610142576101403660031901126101425761068561075c565b5060a03660231901126101425760603660c319011261014257610124356001600160401b038111610142576104c1903690600401610772565b34610142575f366003190112610142576020604051338152f35b3461014257610100366003190112610142576106f261075c565b5060a036602319011261014257610707610810565b5060e4356001600160401b038111610142576104c1903690600401610772565b34610142575f36600319011261014257335f908152600160209081526040909120546001600160a01b031661032f565b61079f565b600435906001600160a01b038216820361014257565b9181601f84011215610142578235916001600160401b038311610142576020838186019501011161014257565b3461014257610160366003190112610142576004356001600160a01b0381168103610142575060a03660231901126101425760803660c319011261014257610144356001600160401b038111610142576107fd903690600401610772565b5050630a85dc2960e01b5f908152600490fd5b60c435906001600160a01b038216820361014257565b34610142576101a0366003190112610142576004356001600160a01b0381168103610142575060a03660231901126101425760803660c319011261014257610184356001600160401b038111610142576107fd903690600401610772565b3461014257610120366003190112610142576004356001600160a01b0381168103610142575060a036602319011261014257610104356001600160401b038111610142576107fd903690600401610772565b6101c081019081106001600160401b0382111761055557604052565b90601f801991011681019081106001600160401b0382111761055557604052565b1561091a57565b634e487b7160e01b5f52600160045260245ffd5b325f908152600160205260409020546001600160a01b031615610cbf5760e435905f821215610c955750600160ff1b8114610b3a575f035b325f908152600160208190526040909120015490818102918183041490151715610b3a57325f908152600160205260409020546024356001600160a01b0381811693921691606490049083900361014257604051636eb1769f60e11b8152326004820152306024820152602081604481875afa8015610b825782905f90610c5f575b6109f492501015610913565b6040516370a0823160e01b8152326004820152602081602481875afa908115610b82575f91610c2d575b506040516370a0823160e01b81526004810184905292602084602481885afa938415610b82575f94610bf9575b506040516323b872dd60e01b81523260048201528160248201528360448201526020816064815f8a5af18015610b8257610bc2575b50806040518481527f597440e65d8cdea1298e19df50e115bda25508180452d87a7f4f99195fb843a460203292a36040516370a0823160e01b815232600482015290602082602481895afa918215610b82575f92610b8d575b506020906024604051809881936370a0823160e01b835260048301525afa948515610b82575f95610b4e575b50828203918211610b3a57610b1a9114610913565b8101809111610b3a57610b2d9114610913565b63b47b2fb160e01b905f90565b634e487b7160e01b5f52601160045260245ffd5b9094506020813d602011610b7a575b81610b6a602093836108f2565b810103126101425751935f610b05565b3d9150610b5d565b6040513d5f823e3d90fd5b9091506020813d602011610bba575b81610ba9602093836108f2565b810103126101425751906020610ad9565b3d9150610b9c565b6020813d602011610bf1575b81610bdb602093836108f2565b8101031261014257518015158114610a80575f80fd5b3d9150610bce565b9093506020813d602011610c25575b81610c15602093836108f2565b810103126101425751925f610a4b565b3d9150610c08565b90506020813d602011610c57575b81610c48602093836108f2565b8101031261014257515f610a1e565b3d9150610c3b565b50506020813d602011610c8d575b81610c7a602093836108f2565b8101031261014257816109f491516109e8565b3d9150610c6d565b60801d600f0b90506f7fffffffffffffffffffffffffffffff198114610b3a575f03600f0b610966565b5063b47b2fb160e01b905f90565b5f9182918160405192839283378101838152039082305af1903d15610d43573d916001600160401b0383116105555760405192610d14601f8201601f1916602001856108f2565b83523d5f602085013e5b610d415750805115610d3257602081519101fd5b6314815f4760e31b5f5260045ffd5b565b606091610d1e56fea26469706673582212201a7b96b5fd798195a2e2062064daba112f48f35333391e99f3bddef423a582a264736f6c634300081b0033";

type AfterSwapDonationHookConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AfterSwapDonationHookConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AfterSwapDonationHook__factory extends ContractFactory {
  constructor(...args: AfterSwapDonationHookConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _poolManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<AfterSwapDonationHook> {
    return super.deploy(
      _poolManager,
      overrides || {}
    ) as Promise<AfterSwapDonationHook>;
  }
  override getDeployTransaction(
    _poolManager: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_poolManager, overrides || {});
  }
  override attach(address: string): AfterSwapDonationHook {
    return super.attach(address) as AfterSwapDonationHook;
  }
  override connect(signer: Signer): AfterSwapDonationHook__factory {
    return super.connect(signer) as AfterSwapDonationHook__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AfterSwapDonationHookInterface {
    return new utils.Interface(_abi) as AfterSwapDonationHookInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AfterSwapDonationHook {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AfterSwapDonationHook;
  }
}

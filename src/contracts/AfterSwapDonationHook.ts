/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type PoolKeyStruct = {
  currency0: string;
  currency1: string;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: string;
};

export type PoolKeyStructOutput = [string, string, number, number, string] & {
  currency0: string;
  currency1: string;
  fee: number;
  tickSpacing: number;
  hooks: string;
};

export declare namespace IPoolManager {
  export type ModifyLiquidityParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    salt: BytesLike;
  };

  export type ModifyLiquidityParamsStructOutput = [
    number,
    number,
    BigNumber,
    string
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    salt: string;
  };

  export type SwapParamsStruct = {
    zeroForOne: boolean;
    amountSpecified: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type SwapParamsStructOutput = [boolean, BigNumber, BigNumber] & {
    zeroForOne: boolean;
    amountSpecified: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };
}

export declare namespace Hooks {
  export type PermissionsStruct = {
    beforeInitialize: boolean;
    afterInitialize: boolean;
    beforeAddLiquidity: boolean;
    afterAddLiquidity: boolean;
    beforeRemoveLiquidity: boolean;
    afterRemoveLiquidity: boolean;
    beforeSwap: boolean;
    afterSwap: boolean;
    beforeDonate: boolean;
    afterDonate: boolean;
    beforeSwapReturnDelta: boolean;
    afterSwapReturnDelta: boolean;
    afterAddLiquidityReturnDelta: boolean;
    afterRemoveLiquidityReturnDelta: boolean;
  };

  export type PermissionsStructOutput = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    beforeInitialize: boolean;
    afterInitialize: boolean;
    beforeAddLiquidity: boolean;
    afterAddLiquidity: boolean;
    beforeRemoveLiquidity: boolean;
    afterRemoveLiquidity: boolean;
    beforeSwap: boolean;
    afterSwap: boolean;
    beforeDonate: boolean;
    afterDonate: boolean;
    beforeSwapReturnDelta: boolean;
    afterSwapReturnDelta: boolean;
    afterAddLiquidityReturnDelta: boolean;
    afterRemoveLiquidityReturnDelta: boolean;
  };
}

export interface AfterSwapDonationHookInterface extends utils.Interface {
  functions: {
    "afterAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": FunctionFragment;
    "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": FunctionFragment;
    "afterInitialize(address,(address,address,uint24,int24,address),uint160,int24,bytes)": FunctionFragment;
    "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": FunctionFragment;
    "afterSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),int256,bytes)": FunctionFragment;
    "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": FunctionFragment;
    "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": FunctionFragment;
    "beforeInitialize(address,(address,address,uint24,int24,address),uint160,bytes)": FunctionFragment;
    "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": FunctionFragment;
    "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes)": FunctionFragment;
    "disableDonation()": FunctionFragment;
    "donationEnabled()": FunctionFragment;
    "donationEnabled(address)": FunctionFragment;
    "donationPayee()": FunctionFragment;
    "donationPercent(address)": FunctionFragment;
    "donationPercent()": FunctionFragment;
    "donationRecipient()": FunctionFragment;
    "donationRecipient(address)": FunctionFragment;
    "enableDonation(address,uint256)": FunctionFragment;
    "getHookPermissions()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolManager()": FunctionFragment;
    "unlockCallback(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "afterAddLiquidity"
      | "afterDonate"
      | "afterInitialize"
      | "afterRemoveLiquidity"
      | "afterSwap"
      | "beforeAddLiquidity"
      | "beforeDonate"
      | "beforeInitialize"
      | "beforeRemoveLiquidity"
      | "beforeSwap"
      | "disableDonation"
      | "donationEnabled()"
      | "donationEnabled(address)"
      | "donationPayee"
      | "donationPercent(address)"
      | "donationPercent()"
      | "donationRecipient()"
      | "donationRecipient(address)"
      | "enableDonation"
      | "getHookPermissions"
      | "owner"
      | "poolManager"
      | "unlockCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "afterAddLiquidity",
    values: [
      string,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterDonate",
    values: [string, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterInitialize",
    values: [string, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRemoveLiquidity",
    values: [
      string,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterSwap",
    values: [
      string,
      PoolKeyStruct,
      IPoolManager.SwapParamsStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAddLiquidity",
    values: [
      string,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDonate",
    values: [string, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeInitialize",
    values: [string, PoolKeyStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRemoveLiquidity",
    values: [
      string,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwap",
    values: [string, PoolKeyStruct, IPoolManager.SwapParamsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableDonation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationEnabled()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationEnabled(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "donationPayee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationPercent(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "donationPercent()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationRecipient()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationRecipient(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableDonation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHookPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockCallback",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "afterAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationEnabled()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationEnabled(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationPayee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationPercent(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationPercent()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationRecipient()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationRecipient(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHookPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockCallback",
    data: BytesLike
  ): Result;

  events: {
    "Donated(address,uint256)": EventFragment;
    "DonationDisabled(address,uint256)": EventFragment;
    "DonationEnabled(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Donated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationEnabled"): EventFragment;
}

export interface DonatedEventObject {
  recipient: string;
  donatedAmount: BigNumber;
}
export type DonatedEvent = TypedEvent<[string, BigNumber], DonatedEventObject>;

export type DonatedEventFilter = TypedEventFilter<DonatedEvent>;

export interface DonationDisabledEventObject {
  recipient: string;
  percent: BigNumber;
}
export type DonationDisabledEvent = TypedEvent<
  [string, BigNumber],
  DonationDisabledEventObject
>;

export type DonationDisabledEventFilter =
  TypedEventFilter<DonationDisabledEvent>;

export interface DonationEnabledEventObject {
  recipient: string;
  percent: BigNumber;
}
export type DonationEnabledEvent = TypedEvent<
  [string, BigNumber],
  DonationEnabledEventObject
>;

export type DonationEnabledEventFilter = TypedEventFilter<DonationEnabledEvent>;

export interface AfterSwapDonationHook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AfterSwapDonationHookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    afterAddLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    afterDonate(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    afterInitialize(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    afterRemoveLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    afterSwap(
      arg0: string,
      key: PoolKeyStruct,
      swapParams: IPoolManager.SwapParamsStruct,
      delta: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    beforeAddLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    beforeDonate(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    beforeInitialize(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    beforeRemoveLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    beforeSwap(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    disableDonation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "donationEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    "donationEnabled(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    donationPayee(overrides?: CallOverrides): Promise<[string]>;

    "donationPercent(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "donationPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "donationRecipient()"(overrides?: CallOverrides): Promise<[string]>;

    "donationRecipient(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    enableDonation(
      recipient: string,
      percent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getHookPermissions(
      overrides?: CallOverrides
    ): Promise<[Hooks.PermissionsStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolManager(overrides?: CallOverrides): Promise<[string]>;

    unlockCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  afterAddLiquidity(
    arg0: string,
    arg1: PoolKeyStruct,
    arg2: IPoolManager.ModifyLiquidityParamsStruct,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  afterDonate(
    arg0: string,
    arg1: PoolKeyStruct,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  afterInitialize(
    arg0: string,
    arg1: PoolKeyStruct,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  afterRemoveLiquidity(
    arg0: string,
    arg1: PoolKeyStruct,
    arg2: IPoolManager.ModifyLiquidityParamsStruct,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  afterSwap(
    arg0: string,
    key: PoolKeyStruct,
    swapParams: IPoolManager.SwapParamsStruct,
    delta: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  beforeAddLiquidity(
    arg0: string,
    arg1: PoolKeyStruct,
    arg2: IPoolManager.ModifyLiquidityParamsStruct,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  beforeDonate(
    arg0: string,
    arg1: PoolKeyStruct,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  beforeInitialize(
    arg0: string,
    arg1: PoolKeyStruct,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  beforeRemoveLiquidity(
    arg0: string,
    arg1: PoolKeyStruct,
    arg2: IPoolManager.ModifyLiquidityParamsStruct,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  beforeSwap(
    arg0: string,
    arg1: PoolKeyStruct,
    arg2: IPoolManager.SwapParamsStruct,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  disableDonation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "donationEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  "donationEnabled(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  donationPayee(overrides?: CallOverrides): Promise<string>;

  "donationPercent(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "donationPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  "donationRecipient()"(overrides?: CallOverrides): Promise<string>;

  "donationRecipient(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  enableDonation(
    recipient: string,
    percent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getHookPermissions(
    overrides?: CallOverrides
  ): Promise<Hooks.PermissionsStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolManager(overrides?: CallOverrides): Promise<string>;

  unlockCallback(
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    afterAddLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    afterDonate(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterInitialize(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterRemoveLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    afterSwap(
      arg0: string,
      key: PoolKeyStruct,
      swapParams: IPoolManager.SwapParamsStruct,
      delta: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    beforeAddLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeDonate(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeInitialize(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeRemoveLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeSwap(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, number]>;

    disableDonation(overrides?: CallOverrides): Promise<void>;

    "donationEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    "donationEnabled(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    donationPayee(overrides?: CallOverrides): Promise<string>;

    "donationPercent(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "donationPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    "donationRecipient()"(overrides?: CallOverrides): Promise<string>;

    "donationRecipient(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    enableDonation(
      recipient: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getHookPermissions(
      overrides?: CallOverrides
    ): Promise<Hooks.PermissionsStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolManager(overrides?: CallOverrides): Promise<string>;

    unlockCallback(data: BytesLike, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Donated(address,uint256)"(
      recipient?: string | null,
      donatedAmount?: null
    ): DonatedEventFilter;
    Donated(
      recipient?: string | null,
      donatedAmount?: null
    ): DonatedEventFilter;

    "DonationDisabled(address,uint256)"(
      recipient?: string | null,
      percent?: null
    ): DonationDisabledEventFilter;
    DonationDisabled(
      recipient?: string | null,
      percent?: null
    ): DonationDisabledEventFilter;

    "DonationEnabled(address,uint256)"(
      recipient?: string | null,
      percent?: null
    ): DonationEnabledEventFilter;
    DonationEnabled(
      recipient?: string | null,
      percent?: null
    ): DonationEnabledEventFilter;
  };

  estimateGas: {
    afterAddLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    afterDonate(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    afterInitialize(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    afterRemoveLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    afterSwap(
      arg0: string,
      key: PoolKeyStruct,
      swapParams: IPoolManager.SwapParamsStruct,
      delta: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    beforeAddLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    beforeDonate(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    beforeInitialize(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    beforeRemoveLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    beforeSwap(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    disableDonation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "donationEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    "donationEnabled(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donationPayee(overrides?: CallOverrides): Promise<BigNumber>;

    "donationPercent(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "donationPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    "donationRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    "donationRecipient(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableDonation(
      recipient: string,
      percent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getHookPermissions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    unlockCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    afterAddLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    afterDonate(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    afterInitialize(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    afterRemoveLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    afterSwap(
      arg0: string,
      key: PoolKeyStruct,
      swapParams: IPoolManager.SwapParamsStruct,
      delta: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    beforeAddLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    beforeDonate(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    beforeInitialize(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    beforeRemoveLiquidity(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    beforeSwap(
      arg0: string,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    disableDonation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "donationEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "donationEnabled(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationPayee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "donationPercent(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "donationPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "donationRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "donationRecipient(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableDonation(
      recipient: string,
      percent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getHookPermissions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
